Dockerized QPKG
============================

.. exec::
    import subprocess as sp
    import json
    ret = sp.check_output('curl -sq -XPOST -c cookies.txt -d "username=admin&password=${QPASSWORD}" http://${QIP}:${QPORT}/containerstation/api/v1/login', shell=True)
    try:
        auth = json.loads(ret)
        if 'error' in auth:
            raise Exception
    except:
        raise Exception('Unauthorized: ' + str(ret))

.. contents::

What is Dockerized QPKG (DQPKG)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dockerized QPKG is a QPKG that simply ship Docker Application into QNAP NAS. DQPKG comprises a `Docker-Compose <https://docs.docker.com/compose/overview/>`_ file to describe application's services, a setup wizard to configure Docker-Compose file before launching and a reverse proxy configure file to serve application with the same port as NAS.

Quick Start
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A DQPKG is built by Docker Image (`qnapnas/qdk2 <https://hub.docker.com/r/qnapnas/qdk2/>`_). Before starting to build DQPKG, you have to install Docker and Git on your Linux. Following demonstration is supposed to run under Ubuntu 16.04.

Get Docker
----------

Update your APT package index including Docker.

    .. sourcecode:: bash

        $ sudo apt-get update
        $ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
        $ echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
        $ sudo apt-get update

Install Docker.

    .. sourcecode:: bash

        $ sudo apt-get install -y docker-engine

Verify your installation.

    .. sourcecode:: bash

        $ sudo docker run hello-world

Full install instructions for all flavors of Linux we support are at `Install Docker Engine <https://docs.docker.com/engine/installation/>`_.

Install Git
-----------

It is easiest to install Git on Linux using the preferred package manager of your Linux distribution.

    .. sourcecode:: bash

        $ sudo apt-get install git

For other Linux distribution, please refer to `Download for Linux and Unix <https://git-scm.com/download/linux>`_.

Download Sample Code
--------------------

Docker-QDK2 is a tool for building multi-container Docker applications, and there are many example including in this repository.


Download Docker-QDK2 into your system.

    .. sourcecode:: bash

        $ git clone https://github.com/qnap-dev/docker-qdk2.git

Build Nginx QPKG
----------------

Change directory to docker-qdk2 and build Nginx QPKG.

    .. sourcecode:: bash

        $ cd docker-qdk2
        $ sudo docker run -it --rm -v ${PWD}/example/nginx:/src walkerlee/qdk2-build

Nginx QPKG file will be generated in the nginx folder.

    .. sourcecode:: bash

        $ ls example/nginx/nginx_1.11.qpkg
        example/nginx/nginx_1.11.qpkg

You now can install your QPKG(or download here) in “App Center” → “Manual Install” of QNAP NAS.

Build Your Own Dockerized QPKG
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this section, we will explain Nginx QPKG in depth. The source code can be found in `nginx folder <https://github.com/qnap-dev/docker-qdk2/tree/master/example/nginx>`_ in Docker-QDK2. “example/nginx” is the context for your application as shown in following. The directory should only contain resources to start that app.


    .. sourcecode:: bash

        example/nginx
        ├──build/
        │   └── nginx_1.11_x86_64.qpkg
        ├── icons/
        ├── package_routines
        ├── qpkg.cfg
        └── shared/
            ├── docker-compose.yml
            ├── nginx.apache.conf.tpl
            ├── nginx.sh
            └── wizard/
                ├── description/
                │   ├── cht.md
                │   └── eng.md
                ├── i18n/
                │   ├── cht.json
                │   └── eng.json
                └── install.json

Configure QPKG
--------------

Edit the content of "qpkg.cfg"

    - QPKG_NAME: Name of the QPKG, which is usually composed in lowercase and hyphen(-)
    - QPKG_VER: Version of the QPKG, which is limited to 12 characters and formed by digital and dot(.)
    - QPKG_AUTHOR: Author of the QPKG

Example of nginx/qpkg.cfg:

    .. sourcecode:: bash

        QPKG_NAME="nginx"
        QPKG_DISPLAYNAME="Nginx"
        QPKG_VER="1.11"
        QPKG_AUTHOR="container@qnap.com"
        QPKG_SUMMARY="Nginx (pronounced "engine-x") is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server)."
        QPKG_SERVICE_PROGRAM="nginx.sh"
        QPKG_TIMEOUT="120,60"
        QPKG_REQUIRE="container-station >= 1.7.1893"
        QPKG_WEBUI="/nginx/"
        QPKG_WEB_PORT="-1"


Please refer to `QDK - QPKG Development Kit <http://download.qnap.com/dev/QDK_2.0.pdf>`_ for detail.

Customize QPKG routines
-----------------------

Content of file “package_routines”

    - pkg_pre_install() : routines before install
    - pkg_install() : routines during install
    - pkg_post_install() : routines after install
    - PKG_PRE_REMOVE : routines before uninstall
    - PKG_MAIN_REMOVE : routines during uninstall
    - PKG_POST_REMOVE : routines after uninstall

Content of file “shared/nginx.sh"

    - Start : routines when starting the QPKG
    - Stop : routines when stopping the QPKG
    - Remove : routines when removing the QPKG

Take Nginx for example, when Nginx APP launch, nginx.sh call dqpkg service to pull image correctly and start Nginx service.

    - Start - qbus put com.qnap.dqpkg/qpkg/nginx/start
    - Stop - qbus put com.qnap.dqpkg/qpkg/nginx/stop
    - Remove - qbus put com.qnap.dqpkg/qpkg/nginx/remove

Please refer to `QDK - QPKG Development Kit <http://download.qnap.com/dev/QDK_2.0.pdf>`_ for detail.

Add files to QPKG
-----------------

Put files in below folders for different purposes:

    - shared/: Platform-independent files and folders. Details in the next section.
    - icons/: icon files

        - ${QPKG_NAME}.gif is the image displayed in the web interface when the QPKG is enabled. It should be a GIF image of 64x64 pixels.
        - ${QPKG_NAME}_gray.gif is the image displayed in the web interface when the QPKG is disabled. It should be a GIF image of 64x64 pixels. It is usually a grayscale version of the ${QPKG_NAME}.gif image, but that is not a requirement.
        - ${QPKG_NAME}_80.gif is the image displayed in the pop-up dialog (with information about the QPKG and the buttons to enable, disable, and remove). It should be a GIF image of 80x80 pixels.
        - If no icons are included then the QPKG is given default icons at installation.

Other files under shared/
-------------------------

**QPKG Description**

We begin with a description file of the QPKG in Markdown syntax. Description file naming with language code in lowercase. (i.e., eng.md, cht.md)

Example of description file wizard/eng.md:

    .. sourcecode:: bash

        ## Description
        Nginx (pronounced "engine-x") is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server).

Language code list:

    ========== ==================== ====
    Languages  Languages in Chinese Code
    ========== ==================== ====
    English    英文                 ENG
    简体中文   简体中文             CHS
    繁體中文   繁體中文             CHT
    Czech      捷克語               CZE
    Dansk      丹麥語               DAN
    Deutsch    德語                 GER
    Español    西班牙語             SPA
    Français   法國語               FRE
    Italiano   意大利語             ITA
    日本語     日本語               JPN
    한글       韓語                 KOR
    Norsk      挪威語               NOR
    Polski     波蘭語               POL
    Русский    俄羅斯語             RUS
    Suomi      芬蘭語               FIN
    Svenska    瑞典語               SWE
    Nederlands 荷蘭語               DUT
    Turk dili  土耳其語             TUR
    ไทย        泰國語               THA
    Português  葡萄牙語             POR
    Magyar     匈牙利語             HUN
    Ελληνικά   希臘語               GRK
    Român      羅馬尼亞語           ROM
    ========== ==================== ====

**Compose file**

Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application’s services.
Three points for attention in writing docker-compose.yml file.

* Dockerized QPKG only supported version 2 file format.
* The service need to expose port 80 in port configuration (“HOST_PORT:CONTAINER_PORT”). In other words, CONTAINER_PORT must be set to 80 because the system will check service health by connecting to port 80.
* To avoid losing any data when upgrading the service, you should mount a volume at ${PWD}

Example of shared/docker-compose.yml:

    .. sourcecode:: bash

        version: '2'

        services:
          nginx:
            image: nginx:1.11-alpine
            ports:
              - "18080:80"

Full reference: https://docs.docker.com/compose/compose-file/

**Apache reverse proxy**

In order to let your APP provide service on port 8080 (It’s the same with default HTTP port of NAS), we can create a ${QPKG_NAME}.apache.conf.tpl to configure NAS reverse proxy.

Example of shared/nginx.apache.conf.tpl:

    .. sourcecode:: bash

        ProxyRequests off
        ProxyPass /nginx http://127.0.0.1:<@http_port@>
        ProxyPassReverse /nginx http://127.0.0.1:<@http_port@>

For further information, please refer to `Apache Module mod_proxy <https://httpd.apache.org/docs/current/mod/mod_proxy.html>`_.

**Setup wizard**

reate a config file install.json describing how it will be integrated into QTS in JSON format, and stored in the **wizard** folder.

It contains three things under wizard directory.

    1. **description/** - Short description of your APP.
    2. **i18n/** - Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily. We provide English and Chinese (Traditional) file under i18n folder.You can define environment variables in eng.json and cht.json. Based on the language of NAS, the system will set proper parameters into install.json.
    3. **install.json** - This file is used to define wizard and form for custom configuration. According to user requirements, wizard can provide pages for setting different kinds of environment variables before the service installing. After user fills out forms, parameters will be saved to docker-compose-wizard.yml. At last, Compose run services from docker-compose-wizard.yml. These wizard pages are generated from install.json. You need to modify install.json for custom configuration.

Example of shared/wizard/install.json:

    .. sourcecode:: bash

        {
          "api_version": "v1",
          "title": "{{NGINX_NAME}}",
          "wizard": [
            {
              "title": "{{NGINX_BASE_PAGE}}",
              "schema": {
                "http_port": {
                  "title": "HTTP Port",
                  "type": "integer",
                  "description": "{{NGINX_WEB_HOST_PORT_DESC}}",
                  "minimum": 1,
                  "maximum": 65535,
                  "required": true
                }
              },
              "form": [
                "http_port"
              ]
            }
          ],
          "binding": {
            "type": "yaml",
            "file": "docker-compose.yml",
            "data": {
              "http_port": "services.nginx.ports[0]"
            },
            "template": ["\*.tpl"]
          }
        }

    - api_version - The latest version is v1.
    - title - Define a title for your pop-up wizard page.
    - wizard - The wizard maps to an array. It’s composed of three parts:

        - title - Subtitle of pop-up wizard page.
        - schema - A unique component key value represents a UI component.

            - title - The title of the field
            - type - The type of the value
            - description - The description of the field
        - form - Objects defined in schema.
    - Binding - Binding a file with install.json.

        - type - The type of wizard file is YAML. Only support YAML type currently.
        - file - Only support docker-compose.yml currently.
        - data - Get default value from the binding file
        - template - Set values to specific file. Take Nginx for example, the value of http_port maps to <@http_port@> in shared/nginx.apache.conf.tpl.

Here are the details of **install.json** content in JSON format:

    =========== ===========
    Property    Description
    =========== ===========
    api_version Currently we have only “v1” supported
    title       Application name
    wizard      Combine with JSON schema and form definition
    binding     Express your binding rules. It can override values in file depends on user’s input
    =========== ===========

Here are the properties of **wizard**:

+--------+----------------------------------------------------------------------------------------------------------------------+
| Key    | Description                                                                                                          |
+========+======================================================================================================================+
| title  | Title of the field                                                                                                   |
+--------+----------------------------------------------------------------------------------------------------------------------+
| schema | Schema for this field.                                                                                               |
|        |                                                                                                                      |
|        | - “**title**”: A title will preferably be short                                                                      |
|        | - “**type**”: Must be "string", "integer", "boolean"                                                                 |
|        | - “**description**”: description will provide explanation about the purpose of the instance described by this schema.|
|        |                                                                                                                      |
|        | Other validataion keywords:                                                                                          |
|        |                                                                                                                      |
|        | http://json-schema.org/latest/json-schema-validation.html#anchor12                                                   |
+--------+----------------------------------------------------------------------------------------------------------------------+
| form   | If you need to override the order of the forms, or just want to be sure, specify a form definition.                  |
+--------+----------------------------------------------------------------------------------------------------------------------+

General options most field types can handle in the **form**:

    =================== ============================================================================================== =======
    Key                 Description                                                                                    Value
    =================== ============================================================================================== =======
    key                 The dot notation to the attribute on the schema                                                String
    type                Type of field                                                                                  String
    title               Title of field, taken from schema if available                                                 String
    notitle             Set to true to hide title                                                                      Boolean
    description         A description, taken from schema if available, can be HTML                                     String
    validationMessage   Custom validation error message                                                                String
    disableSuccessState Set true to NOT apply 'has-success' class to a field that was validated successfully           Boolean
    disableErrorState   Set true to NOT apply 'has-error' class to a field that failed validation                      Boolean
    readonly            Same effect as readOnly in schema. Put on a fieldset or array and their items will inherit it. Boolean
    htmlClass           CSS Class(es) to be added to the container div                                                 String
    fieldHtmlClass      CSS Class(es) to be added to field input (or similar)                                          String
    labelHtmlClass      CSS Class(es) to be added to the label of the field (or similar)                               String
    condition           Show or hide field depending on expression                                                     String
    =================== ============================================================================================== =======

Here are the properties of **binding**:

    ======== ========================
    Key      Description
    ======== ========================
    type     Support for "yaml” only
    file     Support for “docker-compose.yml” only
    data     The key-value pairs inside data will override the value in docker-compose.yml
    template It will default to rendering all files under QPKG directory which match your conditions.

             Example in Nginx is “\*tpl”. It would rendering file “nginx.apache.conf.tpl” to “nginx.apache.conf”
    ======== ========================

.. note::
    - All words are case sensitive.
    - The {{ANY_STRING}} expression is defined in translation files under i18n folder.

**Generate QPKG file**

When everything is done, pack QPKG by Docker-QDK2 into nginx.qpkg.

- Use below command to build the QPKG file

    .. sourcecode:: bash

        $ sudo docker run -it --rm -v ${PWD}/example/nginx:/src walkerlee/qdk2-build

- The QPKG file will be generated in the nginx folder

    .. sourcecode:: bash

        $ ls example/nginx/nginx_1.11.qpkg
        example/nginx/nginx_1.11.qpkg

Example: GitLab
^^^^^^^^^^^^^^^

This section demonstrates how to build GitLab and run a Dockerized QPKG on NAS. The GitLab project is under docker-qdk2/example/gitlab folder.


Download Gitlab QPKG directly:
https://github.com/qnap-dev/docker-qdk2/raw/master/example/gitlab/build/gitlab_8.16.6_x86_64.qpkg

Define the project components
-----------------------------

Referring to the previous section. Make sure all files required for installation are available.

Here is the contents of GitLab directory.

    .. sourcecode:: bash

        gitlab
        ├── build/
        │   └── gitlab_8.16.6_x86_64.qpkg
        ├── icons/
        ├── package_routines
        ├── qpkg.cfg
        └── shared/
            ├── docker-compose.yml
            ├── gitlab.apache.conf.tpl
            ├── gitlab.sh
            └── wizard/
                ├── description
                │   ├── cht.md
                │   └── eng.md
                ├── i18n/
                │   ├── cht.json
                │   └── eng.json
                └── install.json

Create a GitLab QPKG
--------------------

In this step, you create a GitLab started project by building the QPKG from the build context defined in the previous procedure. Before building the QPKG, you have to add a target of your project in docker-qdk2/example/Makefile.

Run the following command to build the QPKG.

    .. sourcecode:: bash

        $ cd docker-qdk2
        $ sudo docker run -it --rm -v ${PWD}/example:/src walkerlee/qdk2-build bash -c "cd /src; make"

When procedure completed, the QPKG file would be created in build folder.

Install GitLab on NAS
---------------------

First, Install GitLab in App Center and wait for the installation to complete. When clicking **Open** button of GitLab, the wizard description of GitLab will be shown in a new tab.

.. image:: images/dqpkg/gitlab_install.png

In order to run GitLab smoothly, please make sure that your NAS meet all requirements mentioned in **Prerequisites** and **Description**. Then, click **Next** to setup Gitlab.

.. image:: images/dqpkg/gitlab_wizard1.png

In this step, configure the port of GItLab server and other information for root user. Then, click **Next** to continue.

.. image:: images/dqpkg/gitlab_wizard2.png

Configure GitLab SMTP service.

.. image:: images/dqpkg/gitlab_wizard3.png

Configure GitLab LDAP service and click **Finish** button.

.. image:: images/dqpkg/gitlab_wizard4.png

Please allow a few minutes for GitLab to initialize. It will redirect to APP’s website at the end of **Installing** and **Starting**. You need to create a password for root for the first time.

.. image:: images/dqpkg/gitlab_password.png

In this example, key-in the default username **root** and password you set in previous page. Then, click **Sign in**.

.. image:: images/dqpkg/gitlab_homepage.png

Finally, It would login to GitLab Dashboard.

.. image:: images/dqpkg/gitlab_dashboard.png
